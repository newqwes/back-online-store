{"version":3,"sources":["../../src/utils/user.js"],"names":["getUserId","req","setUserDataWithToken","data","token","jwt","sign","id","process","env","ACCESS_TOKEN_SECRET","dataWithToken","setUserDataWithPassword","userData","password","salt","bcrypt","genSaltSync","hashPassword","hashSync","userDataWithPassword","createUserData","body","createResponseUserData","extractedData","responseUserData"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AAEA;;;;;;;;;;AAEA;AACA;AACA;AACA;AACA;AACO,IAAMA,SAAS,GAAG,SAAZA,SAAY,CAAAC,GAAG;AAAA,SAAI,eAAM,IAAN,EAAY,CAAC,MAAD,EAAS,IAAT,CAAZ,EAA4BA,GAA5B,CAAJ;AAAA,CAArB;AAEP;AACA;AACA;AACA;AACA;;;;;AACO,IAAMC,oBAAoB,GAAG,SAAvBA,oBAAuB,CAAAC,IAAI,EAAI;AAC1C,MAAMC,KAAK,GAAGC,sBAAIC,IAAJ,CAAS;AAAEC,IAAAA,EAAE,EAAEJ,IAAI,CAACI;AAAX,GAAT,EAA0BC,OAAO,CAACC,GAAR,CAAYC,mBAAtC,CAAd;;AAEA,MAAMC,aAAa,mCACdR,IADc;AAEjBC,IAAAA,KAAK,mBAAYA,KAAZ;AAFY,IAAnB;;AAKA,SAAOO,aAAP;AACD,CATM;AAWP;AACA;AACA;AACA;AACA;AACA;;;;;AACO,IAAMC,uBAAuB,GAAG,SAA1BA,uBAA0B,CAACC,QAAD,EAAWC,QAAX,EAAwB;AAC7D,MAAMC,IAAI,GAAGC,kBAAOC,WAAP,EAAb;;AAEA,MAAMC,YAAY,GAAGF,kBAAOG,QAAP,CAAgBL,QAAhB,EAA0BC,IAA1B,CAArB;;AAEA,MAAMK,oBAAoB,mCACrBP,QADqB;AAExBC,IAAAA,QAAQ,EAAEI;AAFc,IAA1B;;AAKA,SAAOE,oBAAP;AACD,CAXM;AAaP;AACA;AACA;AACA;AACA;;;;;AACO,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAAAC,IAAI,EAAI;AACpC,MAAMT,QAAQ,GAAG,kBAAKS,IAAL,EAAW,CAAC,UAAD,EAAa,IAAb,EAAmB,MAAnB,CAAX,CAAjB;AAEA,SAAOT,QAAP;AACD,CAJM;AAMP;AACA;AACA;AACA;AACA;;;;;AACO,IAAMU,sBAAsB,GAAG,SAAzBA,sBAAyB,CAAAV,QAAQ,EAAI;AAChD,MAAMW,aAAa,GAAG,4CAA0BX,QAA1B,CAAtB;AAEA,MAAMY,gBAAgB,GAAG,kBAAKD,aAAL,EAAoB,UAApB,CAAzB;AAEA,SAAOC,gBAAP;AACD,CANM","sourcesContent":["import { getOr } from 'lodash/fp';\nimport bcrypt from 'bcryptjs';\nimport jwt from 'jsonwebtoken';\nimport { omit } from 'lodash';\n\nimport { extractDataFromResponseDB } from './extractData';\n\n/**\n * Returns the user id if authorized else return null\n * @param {Object} req - receive a request from the user\n * @returns {(string|null)}\n */\nexport const getUserId = req => getOr(null, ['user', 'id'], req);\n\n/**\n * Returns the user data including token\n * @param {Object} data - ready user data\n * @returns {Object}\n */\nexport const setUserDataWithToken = data => {\n  const token = jwt.sign({ id: data.id }, process.env.ACCESS_TOKEN_SECRET);\n\n  const dataWithToken = {\n    ...data,\n    token: `Bearer ${token}`,\n  };\n\n  return dataWithToken;\n};\n\n/**\n * Returns the user data including password\n * @param {Object} userData - ready user data\n * @param {string} password - new password entered by the user\n * @returns {Object}\n */\nexport const setUserDataWithPassword = (userData, password) => {\n  const salt = bcrypt.genSaltSync();\n\n  const hashPassword = bcrypt.hashSync(password, salt);\n\n  const userDataWithPassword = {\n    ...userData,\n    password: hashPassword,\n  };\n\n  return userDataWithPassword;\n};\n\n/**\n * Returns creates secure user data to write to the database\n * @param {Object} body - new entered user data\n * @returns {Object}\n */\nexport const createUserData = body => {\n  const userData = omit(body, ['password', 'id', 'type']);\n\n  return userData;\n};\n\n/**\n * Returns parses the object in such a way that there is no password in the response\n * @param {Object} userData - data came from database\n * @returns {Object}\n */\nexport const createResponseUserData = userData => {\n  const extractedData = extractDataFromResponseDB(userData);\n\n  const responseUserData = omit(extractedData, 'password');\n\n  return responseUserData;\n};\n"],"file":"user.js"}