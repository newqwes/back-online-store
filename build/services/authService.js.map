{"version":3,"sources":["../../src/services/authService.js"],"names":["AuthService","email","password","userService","findByEmail","foundUser","userPassword","isPasswordEqual","bcrypt","compareSync","responseUserData","responseUserDataWithToken","body","userData","userDataWithPassword","User","create","user"],"mappings":";;;;;;;AAAA;;AAEA;;AACA;;AAOA;;AACA;;;;;;;;;;;;;;IAEMA,W;;;;;;;;;;;;;;AACUC,gBAAAA,K,QAAAA,K,EAAOC,Q,QAAAA,Q;;;uBAEOC,qBAAYC,WAAZ,CAAwBH,KAAxB,C;;;AAAlBI,gBAAAA,S;;oBAEDA,S;;;;;iDACI,6BAAe,GAAf,EAAoB,8BAApB,C;;;AAGSC,gBAAAA,Y,GAAiBD,S,CAA3BH,Q;AAEFK,gBAAAA,e,GAAkBC,kBAAOC,WAAP,CAAmBP,QAAnB,EAA6BI,YAA7B,C;;qBAEpBC,e;;;;;AACIG,gBAAAA,gB,GAAmB,kCAAuBL,SAAvB,C;AACnBM,gBAAAA,yB,GAA4B,gCAAqBD,gBAArB,C;iDAE3B,6BAAe,GAAf,EAAoB,eAApB,EAAqCC,yBAArC,C;;;iDAGF,6BAAe,GAAf,EAAoB,8BAApB,C;;;;;iDAEA,6BAAe,GAAf,EAAoB,cAApB,c;;;;;;;;;;;;;;;;;;;8FAIEC,I;;;;;;;AAEDX,gBAAAA,K,GAAoBW,I,CAApBX,K,EAAOC,Q,GAAaU,I,CAAbV,Q;;uBAESC,qBAAYC,WAAZ,CAAwBH,KAAxB,C;;;AAAlBI,gBAAAA,S;;qBAEFA,S;;;;;kDACK,6BAAe,GAAf,EAAoB,uBAApB,C;;;AAGHQ,gBAAAA,Q,GAAW,0BAAeD,IAAf,C;AACXE,gBAAAA,oB,GAAuB,mCAAwBD,QAAxB,EAAkCX,QAAlC,C;;uBAEVa,eAAKC,MAAL,CAAYF,oBAAZ,C;;;AAAbG,gBAAAA,I;AAEAP,gBAAAA,gB,GAAmB,kCAAuBO,IAAvB,C;AACnBN,gBAAAA,yB,GAA4B,gCAAqBD,gBAArB,C;kDAE3B,6BAAe,GAAf,EAAoB,eAApB,EAAqCC,yBAArC,C;;;;;kDAEA,6BAAe,GAAf,EAAoB,cAApB,e;;;;;;;;;;;;;;;;;;;;;eAKE,IAAIX,WAAJ,E","sourcesContent":["import bcrypt from 'bcryptjs';\n\nimport createResponse from '../utils/createResponse';\nimport {\n  setUserDataWithToken,\n  setUserDataWithPassword,\n  createUserData,\n  createResponseUserData,\n} from '../utils/user';\n\nimport userService from './userService';\nimport User from '../database/models/user';\n\nclass AuthService {\n  async login({ email, password }) {\n    try {\n      const foundUser = await userService.findByEmail(email);\n\n      if (!foundUser) {\n        return createResponse(401, 'Incorrect email or password!');\n      }\n\n      const { password: userPassword } = foundUser;\n\n      const isPasswordEqual = bcrypt.compareSync(password, userPassword);\n\n      if (isPasswordEqual) {\n        const responseUserData = createResponseUserData(foundUser);\n        const responseUserDataWithToken = setUserDataWithToken(responseUserData);\n\n        return createResponse(200, 'Successfully!', responseUserDataWithToken);\n      }\n\n      return createResponse(401, 'Incorrect email or password!');\n    } catch (error) {\n      return createResponse(500, 'Server Error', error);\n    }\n  }\n\n  async create(body) {\n    try {\n      const { email, password } = body;\n\n      const foundUser = await userService.findByEmail(email);\n\n      if (foundUser) {\n        return createResponse(409, 'email already exists!');\n      }\n\n      const userData = createUserData(body);\n      const userDataWithPassword = setUserDataWithPassword(userData, password);\n\n      const user = await User.create(userDataWithPassword);\n\n      const responseUserData = createResponseUserData(user);\n      const responseUserDataWithToken = setUserDataWithToken(responseUserData);\n\n      return createResponse(201, 'Successfully!', responseUserDataWithToken);\n    } catch (error) {\n      return createResponse(500, 'Server Error', error);\n    }\n  }\n}\n\nexport default new AuthService();\n"],"file":"authService.js"}