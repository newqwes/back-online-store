{"version":3,"sources":["../../src/services/productsService.js"],"names":["ProductsService","type","Product","findAll","where","include","model","Option","as","products","id","findOne","product","body","options","param","optionsWithId","map","prevOption","option","productId","Number","update","isFound","destroy","bulkCreate","create"],"mappings":"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","sourcesContent":["import Product from '../database/models/product';\nimport Option from '../database/models/option';\nimport createResponse from '../utils/createResponse';\n\nclass ProductsService {\n  async getAll(type) {\n    try {\n      const products = await Product.findAll({\n        where: { type },\n        include: { model: Option, as: 'options' },\n      });\n\n      return createResponse(200, 'Successfully!', products);\n    } catch (error) {\n      return createResponse(500, 'Server Error', error);\n    }\n  }\n\n  async getByID(id) {\n    try {\n      const product = await Product.findOne({\n        where: { id },\n        include: { model: Option, as: 'options' },\n      });\n\n      if (product) return createResponse(200, 'Successfully!', product);\n\n      return createResponse(404, 'Not found', id);\n    } catch (error) {\n      return createResponse(500, 'Server Error', error);\n    }\n  }\n\n  async update(id, body) {\n    try {\n      const { options, ...param } = body;\n\n      const optionsWithId = options.map(prevOption => {\n        const option = prevOption;\n        option.productId = Number(id);\n\n        return option;\n      });\n\n      const [isFound] = await Product.update(param, {\n        where: { id },\n      });\n\n      if (!isFound) return createResponse(404, 'Not found', id);\n\n      await Option.destroy({ where: { productId: id } });\n\n      await Option.bulkCreate(optionsWithId);\n\n      const product = await Product.findOne({\n        where: { id },\n        include: { model: Option, as: 'options' },\n      });\n\n      return createResponse(200, 'Successfully!', product);\n    } catch (error) {\n      return createResponse(500, 'Server Error', error);\n    }\n  }\n\n  async delete(id) {\n    try {\n      const isFound = await Product.destroy({ where: { id } });\n\n      if (isFound) return createResponse(200, 'Successfully!', id);\n\n      return createResponse(404, 'Not found', id);\n    } catch (error) {\n      return createResponse(500, 'Server Error', error);\n    }\n  }\n\n  async create(body) {\n    try {\n      const product = await Product.create(body, {\n        include: { model: Option, as: 'options' },\n      });\n\n      return createResponse(201, 'Successfully!', product);\n    } catch (error) {\n      return createResponse(500, 'Server Error', error);\n    }\n  }\n}\n\nexport default new ProductsService();\n"],"file":"productsService.js"}